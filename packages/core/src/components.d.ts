/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { CheckboxChangeEventDetail } from "./components/brx-checkbox/brx-checkbox-interface";
import { AutocompleteTypes, TextFieldTypes } from "./interfaces";
import { InputChangeEventDetail } from "./components/brx-input/brx-input.interface";
import { RadioChangeEventDetail } from "./components/brx-radio/brx-radio-interface";
import { RadioGroupChangeEventDetail } from "./components/brx-radio-group/brx-radio-group-interface";
import { StepChangeEventDetail } from "./components/brx-step/brx-step-interface";
import { TabChangeEventDetail, TabClickEventDetail } from "./components/brx-tabs/brx-tabs-interface";
import { TextareaChangeEventDetail } from "./components/brx-textarea/brx-textarea-interface";
import { BrxTooltip } from "./components/brx-tooltip/brx-tooltip";
import { AttachmentAsset, IHandleUploadFiles, UploadChangeEventDetail } from "./components/brx-upload/brx-upload-interfaces";
export namespace Components {
    interface BrxAccordionLegacy {
        "entries": any;
        "negative": boolean;
        "single": boolean;
    }
    interface BrxAccordionLegacyEntry {
        "content": string | undefined;
        "entryId": string | undefined;
        "headerTitle": string | undefined;
    }
    interface BrxAccordionLegacyEntryContent {
        "entryId": string | undefined;
    }
    interface BrxAccordionLegacyEntryItem {
        "active": boolean;
        "entryId": string | undefined;
    }
    interface BrxAccordionTrigger {
        "breakpoint": string | undefined;
        "close": () => Promise<void>;
        "group": string;
        "iconToHide": string;
        "iconToShow": string;
        "target": HTMLElement | string;
        "useIcons": boolean;
    }
    interface BrxAvatar {
        "alt": string | undefined;
        "contentClass": string | undefined;
        "mode": 'picture' | 'name' | 'icon' | undefined;
        "name": string | undefined;
        "size": 'large' | 'medium' | 'small';
        "src": string | undefined;
    }
    interface BrxBreadcrumb {
        "dropdownId": string;
    }
    interface BrxBreadcrumbCard {
        "hidden": boolean;
    }
    interface BrxBreadcrumbItem {
        "active": boolean;
        "home": boolean;
    }
    interface BrxBreadcrumbList {
    }
    interface BrxButton {
        "active": boolean;
        "block": boolean;
        /**
          * The type of button.
         */
        "buttonType": string | undefined;
        "circle": boolean;
        "color": 'danger' | 'success' | 'warning' | 'info';
        "darkMode": boolean;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled": boolean | undefined;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download": string | undefined;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href": string | undefined;
        "loading": boolean;
        "magic": boolean;
        /**
          * CSS class names to be applied to the native button element.
         */
        "nativeClass": string | undefined;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel": string | undefined;
        "signin": boolean | 'avatar';
        "size": 'large' | 'medium' | 'small' | 'xsmall';
        /**
          * If `true`, activates a button with a heavier font weight.
         */
        "strong": boolean;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target": string | undefined;
        /**
          * The type of the button.
         */
        "type": 'submit' | 'reset' | 'button';
        "variant": 'primary' | 'secondary' | 'default';
    }
    interface BrxCard {
        "darkMode": boolean;
        "disabled": boolean;
        "hFixed": boolean;
        "hover": boolean;
        "syncDisabledState": () => Promise<void>;
    }
    interface BrxCardContent {
    }
    interface BrxCardFooter {
    }
    interface BrxCardHeader {
    }
    interface BrxCheckbox {
        "_parent": string | boolean | undefined;
        "checkAllLabel": string;
        /**
          * If `true`, the checkbox is selected.
         */
        "checked": boolean | undefined;
        "child": string | undefined;
        "danger": boolean | undefined;
        "darkMode": boolean;
        /**
          * If `true`, the user cannot interact with the checkbox.
         */
        "disabled": boolean;
        "getNativeChecked": () => Promise<boolean>;
        "hiddenLabel": boolean;
        /**
          * If `true`, the checkbox will visually appear as indeterminate.
         */
        "indeterminate": boolean;
        "inputId": string | undefined;
        "invalid": boolean | undefined;
        "label": string | undefined;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        "size": 'small' | 'medium';
        "state": 'invalid' | 'danger' | undefined;
        "uncheckAllLabel": string;
        "valid": boolean | undefined;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the `checked` property for that.  The value of a checkbox is analogous to the value of an `<input type="checkbox">`, it's only used when the checkbox participates in a native `<form>`.
         */
        "value": any | null;
    }
    interface BrxCheckgroup {
    }
    interface BrxCollapseTrigger {
        "breakpoint": string | undefined;
        "close": (emitEvent?: boolean) => Promise<void>;
        "getIsOpen": () => Promise<boolean>;
        "getTarget": () => Promise<HTMLElement>;
        "getTrigger": () => Promise<HTMLElement>;
        "iconToHide": string;
        "iconToShow": string;
        "open": (emitEvent?: boolean) => Promise<void>;
        "target": HTMLElement | string;
        "useIcons": boolean;
    }
    interface BrxDivider {
        "darkMode": boolean;
        "dashed": boolean;
        "size": 'sm' | 'md' | 'lg';
        "vertical": boolean;
    }
    interface BrxDropdown {
    }
    interface BrxDropdownTrigger {
        "breakpoint": string | undefined;
        "iconToHide": string;
        "iconToShow": string;
        "target": HTMLElement | string;
        "useIcons": boolean;
    }
    interface BrxIcon {
        "iconClass": string | undefined;
        /**
          * Define o carregamento automático dos recursos.
         */
        "loadResources": boolean;
        /**
          * O nome do ícone. bicycle -> fa5/fas/bicycle
         */
        "name": string;
    }
    interface BrxInput {
        /**
          * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
         */
        "accept"?: string;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
         */
        "autocapitalize": string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete": AutocompleteTypes;
        /**
          * Whether auto-correction should be enabled when the user is entering/editing the text value.
         */
        "autocorrect": 'on' | 'off';
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus": boolean;
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
         */
        "clearInput": boolean;
        /**
          * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
         */
        "clearOnEdit"?: boolean;
        "color": 'success' | 'danger' | 'warning' | 'info' | undefined;
        "density": 'small' | 'medium' | 'large' | undefined;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        "enablePasswordToggle": boolean;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        "hiddenLabel": boolean;
        "inline": boolean;
        "inputId": string | undefined;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        "label": string;
        "labelClass": string;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, `"date"`, or `"password"`, otherwise it is ignored. When the type attribute is `"date"`, `pattern` will only be used in browsers that do not support the `"date"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.
         */
        "pattern"?: string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Sets focus on the specified `my-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The initial size of the control. This value is in pixels unless the value of the type attribute is `"text"` or `"password"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
         */
        "size"?: number;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck": boolean;
        "startIconName": string | undefined;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
         */
        "step"?: string;
        "toggleShowPassword": () => Promise<void>;
        /**
          * The type of control to display. The default type is text.
         */
        "type": TextFieldTypes;
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface BrxItem {
        "button": boolean;
        "disabled": boolean;
        "passStyles": boolean;
        "selected": boolean;
    }
    interface BrxList {
        "headerTitle": string | undefined;
        "horizontal": boolean;
        "lines": 'one' | 'two' | 'three' | undefined;
    }
    interface BrxListHeader {
        "headerTitle": string;
    }
    interface BrxLoading {
        "progress": string | number | undefined;
        "size": string | undefined;
        "variant": string | undefined;
    }
    interface BrxMessage {
        "dismiss": () => Promise<void>;
        "dismissable": boolean;
        "messageTitle": string;
        "severity": 'success' | 'danger' | 'info' | 'warning';
        "variant": 'message' | 'feedback';
    }
    interface BrxModal {
        "size": 'xsmall' | 'small' | 'medium' | 'large' | 'auto' | undefined;
    }
    interface BrxModalBody {
    }
    interface BrxModalFooter {
    }
    interface BrxModalHeader {
    }
    interface BrxNotification {
        "_dismiss": () => Promise<void>;
    }
    interface BrxRadio {
        /**
          * The tabindex of the radio button.
         */
        "buttonTabindex": number;
        /**
          * If `true`, the radio is selected.
         */
        "checked": boolean;
        /**
          * If `true`, the user cannot interact with the radio.
         */
        "disabled": boolean;
        "getNativeChecked": () => Promise<boolean>;
        "inputId": string | undefined;
        "label": string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        "setButtonTabindex": (value: number) => Promise<void>;
        "setFocus": (ev: any) => Promise<void>;
        /**
          * the value of the radio.
         */
        "value"?: any | null;
    }
    interface BrxRadioGroup {
        /**
          * If `true`, the radios can be deselected.
         */
        "allowEmptySelection": boolean;
        "label"?: HTMLLabelElement | string | null;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * the value of the radio group.
         */
        "value"?: any | null;
    }
    interface BrxScrim {
        "active": boolean;
        "closeElement": string | undefined;
        "hideScrim": () => Promise<void>;
        "showScrim": () => Promise<void>;
        "type": 'foco' | 'legibilidade' | 'inibicao';
    }
    interface BrxScrimTrigger {
        "target": HTMLBrxScrimElement | string;
    }
    interface BrxSignin {
        "iconName": string;
        "label": string;
        "showIcon": boolean;
        "showLabel": boolean;
    }
    interface BrxSkiplink {
        "full": boolean;
    }
    interface BrxStep {
        "defaultValue": number | undefined;
        "type": 'simple' | 'text' | 'void' | undefined;
        "updateActiveStep": (value: number | undefined) => Promise<void>;
        "value": number | null;
    }
    interface BrxStepProgress {
    }
    interface BrxStepProgressBtn {
        "active": boolean;
        "alert": 'success' | 'info' | 'warning' | 'danger' | undefined;
        "disabled": boolean;
        "stepNum": string;
        "tooltipText": string | undefined;
    }
    interface BrxTab {
        "counter": boolean;
        "iconName": string;
        "label": string | undefined;
        "setActive": (active: boolean) => Promise<void>;
        "tabTitle": string;
        "tooltipText": string | undefined;
        "value": string | undefined;
    }
    interface BrxTabs {
        "counter": boolean;
        "darkMode": boolean;
        "defaultValue": string | undefined;
        "getCurrentValue": () => Promise<string>;
        "name": string;
        "size": 'small' | 'medium' | 'large';
        "value": string | undefined | null;
    }
    interface BrxTabsPanel {
        "active": boolean;
        "value": string | undefined;
    }
    interface BrxTabsPanels {
        "darkMode": boolean;
        "name": string;
    }
    interface BrxTag {
        "interaction": boolean;
        "interactionSelect": boolean;
        "selected": boolean;
    }
    interface BrxTextarea {
        /**
          * If `true`, the textarea container will grow and shrink based on the contents of the textarea.
         */
        "autoGrow": boolean;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available optbrxs: `"off"`, `"none"`, `"on"`, `"sentences"`, `"words"`, `"characters"`.
         */
        "autocapitalize": string;
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus": boolean;
        /**
          * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
         */
        "clearOnEdit": boolean;
        "color": 'success' | 'danger' | 'warning' | 'info';
        /**
          * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.
         */
        "cols"?: number;
        "counter"?: 'limit' | 'total';
        "darkMode": boolean;
        /**
          * If `true`, the user cannot interact with the textarea.
         */
        "disabled": boolean;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        /**
          * This is required for a WebKit bug which requires us to blur and focus an input to properly focus the input in an item with delegatesFocus. It will no longer be needed with iOS 14.
         */
        "fireFocusEvents": boolean;
        /**
          * Returns the native `<textarea>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLTextAreaElement>;
        "inline": boolean;
        "inputId": string;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        "label": string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Instructbrxal text that shows before the input has a value.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * The number of visible text lines for the control.
         */
        "rows"?: number;
        /**
          * Sets blur on the native `textarea` in `brx-textarea`. Use this method instead of the global `textarea.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `textarea` in `brx-textarea`. Use this method instead of the global `textarea.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck": boolean;
        /**
          * The value of the textarea.
         */
        "value"?: string | null;
        /**
          * Indicates how the control wraps text.
         */
        "wrap"?: 'hard' | 'soft' | 'off';
    }
    interface BrxTooltip {
        "active": boolean;
        "color": string;
        "hide": () => Promise<void>;
        "place": 'top' | 'bottom' | 'left' | 'right';
        "popover": boolean;
        "target": string | HTMLElement | undefined;
        "text": string | undefined;
        "timer": number | undefined;
        "type": string;
    }
    interface BrxTooltipAuto {
        "place": BrxTooltip['place'];
        "tooltipText": string | undefined;
    }
    interface BrxTooltipContent {
        "color": string;
        "place": string;
        "popover": boolean;
    }
    interface BrxUpload {
        /**
          * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
         */
        "accept"?: string;
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus": boolean;
        "disabled": boolean;
        "getAttachmentAssets": () => Promise<AttachmentAsset[]>;
        "handleUploadFiles": IHandleUploadFiles;
        "hiddenLabel": boolean;
        "inputId": string | undefined;
        "label": string | undefined;
        "labelClass": string;
        "multiple": boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * The initial size of the control. This value is in pixels unless the value of the type attribute is `"text"` or `"password"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
         */
        "size"?: number;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck": boolean;
        "status": 'danger' | 'warning' | 'info' | 'success' | undefined;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
         */
        "step"?: string;
        "value": AttachmentAsset[] | null;
    }
}
export interface BrxAccordionLegacyEntryItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBrxAccordionLegacyEntryItemElement;
}
export interface BrxButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBrxButtonElement;
}
export interface BrxCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBrxCheckboxElement;
}
export interface BrxCollapseTriggerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBrxCollapseTriggerElement;
}
export interface BrxInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBrxInputElement;
}
export interface BrxRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBrxRadioElement;
}
export interface BrxRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBrxRadioGroupElement;
}
export interface BrxStepCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBrxStepElement;
}
export interface BrxTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBrxTabsElement;
}
export interface BrxTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBrxTextareaElement;
}
export interface BrxUploadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBrxUploadElement;
}
declare global {
    interface HTMLBrxAccordionLegacyElement extends Components.BrxAccordionLegacy, HTMLStencilElement {
    }
    var HTMLBrxAccordionLegacyElement: {
        prototype: HTMLBrxAccordionLegacyElement;
        new (): HTMLBrxAccordionLegacyElement;
    };
    interface HTMLBrxAccordionLegacyEntryElement extends Components.BrxAccordionLegacyEntry, HTMLStencilElement {
    }
    var HTMLBrxAccordionLegacyEntryElement: {
        prototype: HTMLBrxAccordionLegacyEntryElement;
        new (): HTMLBrxAccordionLegacyEntryElement;
    };
    interface HTMLBrxAccordionLegacyEntryContentElement extends Components.BrxAccordionLegacyEntryContent, HTMLStencilElement {
    }
    var HTMLBrxAccordionLegacyEntryContentElement: {
        prototype: HTMLBrxAccordionLegacyEntryContentElement;
        new (): HTMLBrxAccordionLegacyEntryContentElement;
    };
    interface HTMLBrxAccordionLegacyEntryItemElement extends Components.BrxAccordionLegacyEntryItem, HTMLStencilElement {
    }
    var HTMLBrxAccordionLegacyEntryItemElement: {
        prototype: HTMLBrxAccordionLegacyEntryItemElement;
        new (): HTMLBrxAccordionLegacyEntryItemElement;
    };
    interface HTMLBrxAccordionTriggerElement extends Components.BrxAccordionTrigger, HTMLStencilElement {
    }
    var HTMLBrxAccordionTriggerElement: {
        prototype: HTMLBrxAccordionTriggerElement;
        new (): HTMLBrxAccordionTriggerElement;
    };
    interface HTMLBrxAvatarElement extends Components.BrxAvatar, HTMLStencilElement {
    }
    var HTMLBrxAvatarElement: {
        prototype: HTMLBrxAvatarElement;
        new (): HTMLBrxAvatarElement;
    };
    interface HTMLBrxBreadcrumbElement extends Components.BrxBreadcrumb, HTMLStencilElement {
    }
    var HTMLBrxBreadcrumbElement: {
        prototype: HTMLBrxBreadcrumbElement;
        new (): HTMLBrxBreadcrumbElement;
    };
    interface HTMLBrxBreadcrumbCardElement extends Components.BrxBreadcrumbCard, HTMLStencilElement {
    }
    var HTMLBrxBreadcrumbCardElement: {
        prototype: HTMLBrxBreadcrumbCardElement;
        new (): HTMLBrxBreadcrumbCardElement;
    };
    interface HTMLBrxBreadcrumbItemElement extends Components.BrxBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLBrxBreadcrumbItemElement: {
        prototype: HTMLBrxBreadcrumbItemElement;
        new (): HTMLBrxBreadcrumbItemElement;
    };
    interface HTMLBrxBreadcrumbListElement extends Components.BrxBreadcrumbList, HTMLStencilElement {
    }
    var HTMLBrxBreadcrumbListElement: {
        prototype: HTMLBrxBreadcrumbListElement;
        new (): HTMLBrxBreadcrumbListElement;
    };
    interface HTMLBrxButtonElement extends Components.BrxButton, HTMLStencilElement {
    }
    var HTMLBrxButtonElement: {
        prototype: HTMLBrxButtonElement;
        new (): HTMLBrxButtonElement;
    };
    interface HTMLBrxCardElement extends Components.BrxCard, HTMLStencilElement {
    }
    var HTMLBrxCardElement: {
        prototype: HTMLBrxCardElement;
        new (): HTMLBrxCardElement;
    };
    interface HTMLBrxCardContentElement extends Components.BrxCardContent, HTMLStencilElement {
    }
    var HTMLBrxCardContentElement: {
        prototype: HTMLBrxCardContentElement;
        new (): HTMLBrxCardContentElement;
    };
    interface HTMLBrxCardFooterElement extends Components.BrxCardFooter, HTMLStencilElement {
    }
    var HTMLBrxCardFooterElement: {
        prototype: HTMLBrxCardFooterElement;
        new (): HTMLBrxCardFooterElement;
    };
    interface HTMLBrxCardHeaderElement extends Components.BrxCardHeader, HTMLStencilElement {
    }
    var HTMLBrxCardHeaderElement: {
        prototype: HTMLBrxCardHeaderElement;
        new (): HTMLBrxCardHeaderElement;
    };
    interface HTMLBrxCheckboxElement extends Components.BrxCheckbox, HTMLStencilElement {
    }
    var HTMLBrxCheckboxElement: {
        prototype: HTMLBrxCheckboxElement;
        new (): HTMLBrxCheckboxElement;
    };
    interface HTMLBrxCheckgroupElement extends Components.BrxCheckgroup, HTMLStencilElement {
    }
    var HTMLBrxCheckgroupElement: {
        prototype: HTMLBrxCheckgroupElement;
        new (): HTMLBrxCheckgroupElement;
    };
    interface HTMLBrxCollapseTriggerElement extends Components.BrxCollapseTrigger, HTMLStencilElement {
    }
    var HTMLBrxCollapseTriggerElement: {
        prototype: HTMLBrxCollapseTriggerElement;
        new (): HTMLBrxCollapseTriggerElement;
    };
    interface HTMLBrxDividerElement extends Components.BrxDivider, HTMLStencilElement {
    }
    var HTMLBrxDividerElement: {
        prototype: HTMLBrxDividerElement;
        new (): HTMLBrxDividerElement;
    };
    interface HTMLBrxDropdownElement extends Components.BrxDropdown, HTMLStencilElement {
    }
    var HTMLBrxDropdownElement: {
        prototype: HTMLBrxDropdownElement;
        new (): HTMLBrxDropdownElement;
    };
    interface HTMLBrxDropdownTriggerElement extends Components.BrxDropdownTrigger, HTMLStencilElement {
    }
    var HTMLBrxDropdownTriggerElement: {
        prototype: HTMLBrxDropdownTriggerElement;
        new (): HTMLBrxDropdownTriggerElement;
    };
    interface HTMLBrxIconElement extends Components.BrxIcon, HTMLStencilElement {
    }
    var HTMLBrxIconElement: {
        prototype: HTMLBrxIconElement;
        new (): HTMLBrxIconElement;
    };
    interface HTMLBrxInputElement extends Components.BrxInput, HTMLStencilElement {
    }
    var HTMLBrxInputElement: {
        prototype: HTMLBrxInputElement;
        new (): HTMLBrxInputElement;
    };
    interface HTMLBrxItemElement extends Components.BrxItem, HTMLStencilElement {
    }
    var HTMLBrxItemElement: {
        prototype: HTMLBrxItemElement;
        new (): HTMLBrxItemElement;
    };
    interface HTMLBrxListElement extends Components.BrxList, HTMLStencilElement {
    }
    var HTMLBrxListElement: {
        prototype: HTMLBrxListElement;
        new (): HTMLBrxListElement;
    };
    interface HTMLBrxListHeaderElement extends Components.BrxListHeader, HTMLStencilElement {
    }
    var HTMLBrxListHeaderElement: {
        prototype: HTMLBrxListHeaderElement;
        new (): HTMLBrxListHeaderElement;
    };
    interface HTMLBrxLoadingElement extends Components.BrxLoading, HTMLStencilElement {
    }
    var HTMLBrxLoadingElement: {
        prototype: HTMLBrxLoadingElement;
        new (): HTMLBrxLoadingElement;
    };
    interface HTMLBrxMessageElement extends Components.BrxMessage, HTMLStencilElement {
    }
    var HTMLBrxMessageElement: {
        prototype: HTMLBrxMessageElement;
        new (): HTMLBrxMessageElement;
    };
    interface HTMLBrxModalElement extends Components.BrxModal, HTMLStencilElement {
    }
    var HTMLBrxModalElement: {
        prototype: HTMLBrxModalElement;
        new (): HTMLBrxModalElement;
    };
    interface HTMLBrxModalBodyElement extends Components.BrxModalBody, HTMLStencilElement {
    }
    var HTMLBrxModalBodyElement: {
        prototype: HTMLBrxModalBodyElement;
        new (): HTMLBrxModalBodyElement;
    };
    interface HTMLBrxModalFooterElement extends Components.BrxModalFooter, HTMLStencilElement {
    }
    var HTMLBrxModalFooterElement: {
        prototype: HTMLBrxModalFooterElement;
        new (): HTMLBrxModalFooterElement;
    };
    interface HTMLBrxModalHeaderElement extends Components.BrxModalHeader, HTMLStencilElement {
    }
    var HTMLBrxModalHeaderElement: {
        prototype: HTMLBrxModalHeaderElement;
        new (): HTMLBrxModalHeaderElement;
    };
    interface HTMLBrxNotificationElement extends Components.BrxNotification, HTMLStencilElement {
    }
    var HTMLBrxNotificationElement: {
        prototype: HTMLBrxNotificationElement;
        new (): HTMLBrxNotificationElement;
    };
    interface HTMLBrxRadioElement extends Components.BrxRadio, HTMLStencilElement {
    }
    var HTMLBrxRadioElement: {
        prototype: HTMLBrxRadioElement;
        new (): HTMLBrxRadioElement;
    };
    interface HTMLBrxRadioGroupElement extends Components.BrxRadioGroup, HTMLStencilElement {
    }
    var HTMLBrxRadioGroupElement: {
        prototype: HTMLBrxRadioGroupElement;
        new (): HTMLBrxRadioGroupElement;
    };
    interface HTMLBrxScrimElement extends Components.BrxScrim, HTMLStencilElement {
    }
    var HTMLBrxScrimElement: {
        prototype: HTMLBrxScrimElement;
        new (): HTMLBrxScrimElement;
    };
    interface HTMLBrxScrimTriggerElement extends Components.BrxScrimTrigger, HTMLStencilElement {
    }
    var HTMLBrxScrimTriggerElement: {
        prototype: HTMLBrxScrimTriggerElement;
        new (): HTMLBrxScrimTriggerElement;
    };
    interface HTMLBrxSigninElement extends Components.BrxSignin, HTMLStencilElement {
    }
    var HTMLBrxSigninElement: {
        prototype: HTMLBrxSigninElement;
        new (): HTMLBrxSigninElement;
    };
    interface HTMLBrxSkiplinkElement extends Components.BrxSkiplink, HTMLStencilElement {
    }
    var HTMLBrxSkiplinkElement: {
        prototype: HTMLBrxSkiplinkElement;
        new (): HTMLBrxSkiplinkElement;
    };
    interface HTMLBrxStepElement extends Components.BrxStep, HTMLStencilElement {
    }
    var HTMLBrxStepElement: {
        prototype: HTMLBrxStepElement;
        new (): HTMLBrxStepElement;
    };
    interface HTMLBrxStepProgressElement extends Components.BrxStepProgress, HTMLStencilElement {
    }
    var HTMLBrxStepProgressElement: {
        prototype: HTMLBrxStepProgressElement;
        new (): HTMLBrxStepProgressElement;
    };
    interface HTMLBrxStepProgressBtnElement extends Components.BrxStepProgressBtn, HTMLStencilElement {
    }
    var HTMLBrxStepProgressBtnElement: {
        prototype: HTMLBrxStepProgressBtnElement;
        new (): HTMLBrxStepProgressBtnElement;
    };
    interface HTMLBrxTabElement extends Components.BrxTab, HTMLStencilElement {
    }
    var HTMLBrxTabElement: {
        prototype: HTMLBrxTabElement;
        new (): HTMLBrxTabElement;
    };
    interface HTMLBrxTabsElement extends Components.BrxTabs, HTMLStencilElement {
    }
    var HTMLBrxTabsElement: {
        prototype: HTMLBrxTabsElement;
        new (): HTMLBrxTabsElement;
    };
    interface HTMLBrxTabsPanelElement extends Components.BrxTabsPanel, HTMLStencilElement {
    }
    var HTMLBrxTabsPanelElement: {
        prototype: HTMLBrxTabsPanelElement;
        new (): HTMLBrxTabsPanelElement;
    };
    interface HTMLBrxTabsPanelsElement extends Components.BrxTabsPanels, HTMLStencilElement {
    }
    var HTMLBrxTabsPanelsElement: {
        prototype: HTMLBrxTabsPanelsElement;
        new (): HTMLBrxTabsPanelsElement;
    };
    interface HTMLBrxTagElement extends Components.BrxTag, HTMLStencilElement {
    }
    var HTMLBrxTagElement: {
        prototype: HTMLBrxTagElement;
        new (): HTMLBrxTagElement;
    };
    interface HTMLBrxTextareaElement extends Components.BrxTextarea, HTMLStencilElement {
    }
    var HTMLBrxTextareaElement: {
        prototype: HTMLBrxTextareaElement;
        new (): HTMLBrxTextareaElement;
    };
    interface HTMLBrxTooltipElement extends Components.BrxTooltip, HTMLStencilElement {
    }
    var HTMLBrxTooltipElement: {
        prototype: HTMLBrxTooltipElement;
        new (): HTMLBrxTooltipElement;
    };
    interface HTMLBrxTooltipAutoElement extends Components.BrxTooltipAuto, HTMLStencilElement {
    }
    var HTMLBrxTooltipAutoElement: {
        prototype: HTMLBrxTooltipAutoElement;
        new (): HTMLBrxTooltipAutoElement;
    };
    interface HTMLBrxTooltipContentElement extends Components.BrxTooltipContent, HTMLStencilElement {
    }
    var HTMLBrxTooltipContentElement: {
        prototype: HTMLBrxTooltipContentElement;
        new (): HTMLBrxTooltipContentElement;
    };
    interface HTMLBrxUploadElement extends Components.BrxUpload, HTMLStencilElement {
    }
    var HTMLBrxUploadElement: {
        prototype: HTMLBrxUploadElement;
        new (): HTMLBrxUploadElement;
    };
    interface HTMLElementTagNameMap {
        "brx-accordion-legacy": HTMLBrxAccordionLegacyElement;
        "brx-accordion-legacy-entry": HTMLBrxAccordionLegacyEntryElement;
        "brx-accordion-legacy-entry-content": HTMLBrxAccordionLegacyEntryContentElement;
        "brx-accordion-legacy-entry-item": HTMLBrxAccordionLegacyEntryItemElement;
        "brx-accordion-trigger": HTMLBrxAccordionTriggerElement;
        "brx-avatar": HTMLBrxAvatarElement;
        "brx-breadcrumb": HTMLBrxBreadcrumbElement;
        "brx-breadcrumb-card": HTMLBrxBreadcrumbCardElement;
        "brx-breadcrumb-item": HTMLBrxBreadcrumbItemElement;
        "brx-breadcrumb-list": HTMLBrxBreadcrumbListElement;
        "brx-button": HTMLBrxButtonElement;
        "brx-card": HTMLBrxCardElement;
        "brx-card-content": HTMLBrxCardContentElement;
        "brx-card-footer": HTMLBrxCardFooterElement;
        "brx-card-header": HTMLBrxCardHeaderElement;
        "brx-checkbox": HTMLBrxCheckboxElement;
        "brx-checkgroup": HTMLBrxCheckgroupElement;
        "brx-collapse-trigger": HTMLBrxCollapseTriggerElement;
        "brx-divider": HTMLBrxDividerElement;
        "brx-dropdown": HTMLBrxDropdownElement;
        "brx-dropdown-trigger": HTMLBrxDropdownTriggerElement;
        "brx-icon": HTMLBrxIconElement;
        "brx-input": HTMLBrxInputElement;
        "brx-item": HTMLBrxItemElement;
        "brx-list": HTMLBrxListElement;
        "brx-list-header": HTMLBrxListHeaderElement;
        "brx-loading": HTMLBrxLoadingElement;
        "brx-message": HTMLBrxMessageElement;
        "brx-modal": HTMLBrxModalElement;
        "brx-modal-body": HTMLBrxModalBodyElement;
        "brx-modal-footer": HTMLBrxModalFooterElement;
        "brx-modal-header": HTMLBrxModalHeaderElement;
        "brx-notification": HTMLBrxNotificationElement;
        "brx-radio": HTMLBrxRadioElement;
        "brx-radio-group": HTMLBrxRadioGroupElement;
        "brx-scrim": HTMLBrxScrimElement;
        "brx-scrim-trigger": HTMLBrxScrimTriggerElement;
        "brx-signin": HTMLBrxSigninElement;
        "brx-skiplink": HTMLBrxSkiplinkElement;
        "brx-step": HTMLBrxStepElement;
        "brx-step-progress": HTMLBrxStepProgressElement;
        "brx-step-progress-btn": HTMLBrxStepProgressBtnElement;
        "brx-tab": HTMLBrxTabElement;
        "brx-tabs": HTMLBrxTabsElement;
        "brx-tabs-panel": HTMLBrxTabsPanelElement;
        "brx-tabs-panels": HTMLBrxTabsPanelsElement;
        "brx-tag": HTMLBrxTagElement;
        "brx-textarea": HTMLBrxTextareaElement;
        "brx-tooltip": HTMLBrxTooltipElement;
        "brx-tooltip-auto": HTMLBrxTooltipAutoElement;
        "brx-tooltip-content": HTMLBrxTooltipContentElement;
        "brx-upload": HTMLBrxUploadElement;
    }
}
declare namespace LocalJSX {
    interface BrxAccordionLegacy {
        "entries"?: any;
        "negative"?: boolean;
        "single"?: boolean;
    }
    interface BrxAccordionLegacyEntry {
        "content"?: string | undefined;
        "entryId"?: string | undefined;
        "headerTitle"?: string | undefined;
    }
    interface BrxAccordionLegacyEntryContent {
        "entryId"?: string | undefined;
    }
    interface BrxAccordionLegacyEntryItem {
        "active"?: boolean;
        "entryId"?: string | undefined;
        "onCollapseChange"?: (event: BrxAccordionLegacyEntryItemCustomEvent<HTMLBrxAccordionLegacyEntryItemElement>) => void;
    }
    interface BrxAccordionTrigger {
        "breakpoint"?: string | undefined;
        "group"?: string;
        "iconToHide"?: string;
        "iconToShow"?: string;
        "target"?: HTMLElement | string;
        "useIcons"?: boolean;
    }
    interface BrxAvatar {
        "alt"?: string | undefined;
        "contentClass"?: string | undefined;
        "mode"?: 'picture' | 'name' | 'icon' | undefined;
        "name"?: string | undefined;
        "size"?: 'large' | 'medium' | 'small';
        "src"?: string | undefined;
    }
    interface BrxBreadcrumb {
        "dropdownId"?: string;
    }
    interface BrxBreadcrumbCard {
        "hidden"?: boolean;
    }
    interface BrxBreadcrumbItem {
        "active"?: boolean;
        "home"?: boolean;
    }
    interface BrxBreadcrumbList {
    }
    interface BrxButton {
        "active"?: boolean;
        "block"?: boolean;
        /**
          * The type of button.
         */
        "buttonType"?: string | undefined;
        "circle"?: boolean;
        "color"?: 'danger' | 'success' | 'warning' | 'info';
        "darkMode"?: boolean;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled"?: boolean | undefined;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download"?: string | undefined;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href"?: string | undefined;
        "loading"?: boolean;
        "magic"?: boolean;
        /**
          * CSS class names to be applied to the native button element.
         */
        "nativeClass"?: string | undefined;
        /**
          * Emitted when the button loses focus.
         */
        "onBrxBlur"?: (event: BrxButtonCustomEvent<void>) => void;
        /**
          * Emitted when the button has focus.
         */
        "onBrxFocus"?: (event: BrxButtonCustomEvent<void>) => void;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel"?: string | undefined;
        "signin"?: boolean | 'avatar';
        "size"?: 'large' | 'medium' | 'small' | 'xsmall';
        /**
          * If `true`, activates a button with a heavier font weight.
         */
        "strong"?: boolean;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target"?: string | undefined;
        /**
          * The type of the button.
         */
        "type"?: 'submit' | 'reset' | 'button';
        "variant"?: 'primary' | 'secondary' | 'default';
    }
    interface BrxCard {
        "darkMode"?: boolean;
        "disabled"?: boolean;
        "hFixed"?: boolean;
        "hover"?: boolean;
    }
    interface BrxCardContent {
    }
    interface BrxCardFooter {
    }
    interface BrxCardHeader {
    }
    interface BrxCheckbox {
        "_parent"?: string | boolean | undefined;
        "checkAllLabel"?: string;
        /**
          * If `true`, the checkbox is selected.
         */
        "checked"?: boolean | undefined;
        "child"?: string | undefined;
        "danger"?: boolean | undefined;
        "darkMode"?: boolean;
        /**
          * If `true`, the user cannot interact with the checkbox.
         */
        "disabled"?: boolean;
        "hiddenLabel"?: boolean;
        /**
          * If `true`, the checkbox will visually appear as indeterminate.
         */
        "indeterminate"?: boolean;
        "inputId"?: string | undefined;
        "invalid"?: boolean | undefined;
        "label"?: string | undefined;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the checkbox loses focus.
         */
        "onBrxBlur"?: (event: BrxCheckboxCustomEvent<void>) => void;
        /**
          * Emitted when the checked property has changed.
         */
        "onBrxChange"?: (event: BrxCheckboxCustomEvent<CheckboxChangeEventDetail>) => void;
        /**
          * Emitted when the checkbox has focus.
         */
        "onBrxFocus"?: (event: BrxCheckboxCustomEvent<void>) => void;
        "size"?: 'small' | 'medium';
        "state"?: 'invalid' | 'danger' | undefined;
        "uncheckAllLabel"?: string;
        "valid"?: boolean | undefined;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the `checked` property for that.  The value of a checkbox is analogous to the value of an `<input type="checkbox">`, it's only used when the checkbox participates in a native `<form>`.
         */
        "value"?: any | null;
    }
    interface BrxCheckgroup {
    }
    interface BrxCollapseTrigger {
        "breakpoint"?: string | undefined;
        "iconToHide"?: string;
        "iconToShow"?: string;
        "onBrxSetTargetVisibilityStatus"?: (event: BrxCollapseTriggerCustomEvent<void>) => void;
        "onBrxTriggerClick"?: (event: BrxCollapseTriggerCustomEvent<void>) => void;
        "target"?: HTMLElement | string;
        "useIcons"?: boolean;
    }
    interface BrxDivider {
        "darkMode"?: boolean;
        "dashed"?: boolean;
        "size"?: 'sm' | 'md' | 'lg';
        "vertical"?: boolean;
    }
    interface BrxDropdown {
    }
    interface BrxDropdownTrigger {
        "breakpoint"?: string | undefined;
        "iconToHide"?: string;
        "iconToShow"?: string;
        "target"?: HTMLElement | string;
        "useIcons"?: boolean;
    }
    interface BrxIcon {
        "iconClass"?: string | undefined;
        /**
          * Define o carregamento automático dos recursos.
         */
        "loadResources"?: boolean;
        /**
          * O nome do ícone. bicycle -> fa5/fas/bicycle
         */
        "name"?: string;
    }
    interface BrxInput {
        /**
          * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
         */
        "accept"?: string;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
         */
        "autocapitalize"?: string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete"?: AutocompleteTypes;
        /**
          * Whether auto-correction should be enabled when the user is entering/editing the text value.
         */
        "autocorrect"?: 'on' | 'off';
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
         */
        "clearInput"?: boolean;
        /**
          * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
         */
        "clearOnEdit"?: boolean;
        "color"?: 'success' | 'danger' | 'warning' | 'info' | undefined;
        "density"?: 'small' | 'medium' | 'large' | undefined;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        "enablePasswordToggle"?: boolean;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        "hiddenLabel"?: boolean;
        "inline"?: boolean;
        "inputId"?: string | undefined;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        "label"?: string;
        "labelClass"?: string;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onBrxBlur"?: (event: BrxInputCustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onBrxChange"?: (event: BrxInputCustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onBrxFocus"?: (event: BrxInputCustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onBrxInput"?: (event: BrxInputCustomEvent<KeyboardEvent>) => void;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, `"date"`, or `"password"`, otherwise it is ignored. When the type attribute is `"date"`, `pattern` will only be used in browsers that do not support the `"date"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.
         */
        "pattern"?: string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * The initial size of the control. This value is in pixels unless the value of the type attribute is `"text"` or `"password"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
         */
        "size"?: number;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck"?: boolean;
        "startIconName"?: string | undefined;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
         */
        "step"?: string;
        /**
          * The type of control to display. The default type is text.
         */
        "type"?: TextFieldTypes;
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface BrxItem {
        "button"?: boolean;
        "disabled"?: boolean;
        "passStyles"?: boolean;
        "selected"?: boolean;
    }
    interface BrxList {
        "headerTitle"?: string | undefined;
        "horizontal"?: boolean;
        "lines"?: 'one' | 'two' | 'three' | undefined;
    }
    interface BrxListHeader {
        "headerTitle"?: string;
    }
    interface BrxLoading {
        "progress"?: string | number | undefined;
        "size"?: string | undefined;
        "variant"?: string | undefined;
    }
    interface BrxMessage {
        "dismissable"?: boolean;
        "messageTitle"?: string;
        "severity"?: 'success' | 'danger' | 'info' | 'warning';
        "variant"?: 'message' | 'feedback';
    }
    interface BrxModal {
        "size"?: 'xsmall' | 'small' | 'medium' | 'large' | 'auto' | undefined;
    }
    interface BrxModalBody {
    }
    interface BrxModalFooter {
    }
    interface BrxModalHeader {
    }
    interface BrxNotification {
    }
    interface BrxRadio {
        /**
          * The tabindex of the radio button.
         */
        "buttonTabindex"?: number;
        /**
          * If `true`, the radio is selected.
         */
        "checked"?: boolean;
        /**
          * If `true`, the user cannot interact with the radio.
         */
        "disabled"?: boolean;
        "inputId"?: string | undefined;
        "label"?: string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the radio button loses focus.
         */
        "onBrxBlur"?: (event: BrxRadioCustomEvent<void>) => void;
        "onBrxChange"?: (event: BrxRadioCustomEvent<RadioChangeEventDetail>) => void;
        /**
          * Emitted when the radio button has focus.
         */
        "onBrxFocus"?: (event: BrxRadioCustomEvent<void>) => void;
        /**
          * the value of the radio.
         */
        "value"?: any | null;
    }
    interface BrxRadioGroup {
        /**
          * If `true`, the radios can be deselected.
         */
        "allowEmptySelection"?: boolean;
        "label"?: HTMLLabelElement | string | null;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the value has changed.
         */
        "onBrxChange"?: (event: BrxRadioGroupCustomEvent<RadioGroupChangeEventDetail>) => void;
        /**
          * the value of the radio group.
         */
        "value"?: any | null;
    }
    interface BrxScrim {
        "active"?: boolean;
        "closeElement"?: string | undefined;
        "type"?: 'foco' | 'legibilidade' | 'inibicao';
    }
    interface BrxScrimTrigger {
        "target"?: HTMLBrxScrimElement | string;
    }
    interface BrxSignin {
        "iconName"?: string;
        "label"?: string;
        "showIcon"?: boolean;
        "showLabel"?: boolean;
    }
    interface BrxSkiplink {
        "full"?: boolean;
    }
    interface BrxStep {
        "defaultValue"?: number | undefined;
        "onBrxStepChange"?: (event: BrxStepCustomEvent<StepChangeEventDetail>) => void;
        "type"?: 'simple' | 'text' | 'void' | undefined;
        "value"?: number | null;
    }
    interface BrxStepProgress {
    }
    interface BrxStepProgressBtn {
        "active"?: boolean;
        "alert"?: 'success' | 'info' | 'warning' | 'danger' | undefined;
        "disabled"?: boolean;
        "stepNum"?: string;
        "tooltipText"?: string | undefined;
    }
    interface BrxTab {
        "counter"?: boolean;
        "iconName"?: string;
        "label"?: string | undefined;
        "tabTitle"?: string;
        "tooltipText"?: string | undefined;
        "value"?: string | undefined;
    }
    interface BrxTabs {
        "counter"?: boolean;
        "darkMode"?: boolean;
        "defaultValue"?: string | undefined;
        "name"?: string;
        "onBrxTabChange"?: (event: BrxTabsCustomEvent<TabChangeEventDetail>) => void;
        "onBrxTabClick"?: (event: BrxTabsCustomEvent<TabClickEventDetail>) => void;
        "size"?: 'small' | 'medium' | 'large';
        "value"?: string | undefined | null;
    }
    interface BrxTabsPanel {
        "active"?: boolean;
        "value"?: string | undefined;
    }
    interface BrxTabsPanels {
        "darkMode"?: boolean;
        "name"?: string;
    }
    interface BrxTag {
        "interaction"?: boolean;
        "interactionSelect"?: boolean;
        "selected"?: boolean;
    }
    interface BrxTextarea {
        /**
          * If `true`, the textarea container will grow and shrink based on the contents of the textarea.
         */
        "autoGrow"?: boolean;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available optbrxs: `"off"`, `"none"`, `"on"`, `"sentences"`, `"words"`, `"characters"`.
         */
        "autocapitalize"?: string;
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        /**
          * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
         */
        "clearOnEdit"?: boolean;
        "color"?: 'success' | 'danger' | 'warning' | 'info';
        /**
          * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.
         */
        "cols"?: number;
        "counter"?: 'limit' | 'total';
        "darkMode"?: boolean;
        /**
          * If `true`, the user cannot interact with the textarea.
         */
        "disabled"?: boolean;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        /**
          * This is required for a WebKit bug which requires us to blur and focus an input to properly focus the input in an item with delegatesFocus. It will no longer be needed with iOS 14.
         */
        "fireFocusEvents"?: boolean;
        "inline"?: boolean;
        "inputId"?: string;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        "label"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onBrxBlur"?: (event: BrxTextareaCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the input value has changed.
         */
        "onBrxChange"?: (event: BrxTextareaCustomEvent<TextareaChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onBrxFocus"?: (event: BrxTextareaCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onBrxInput"?: (event: BrxTextareaCustomEvent<InputEvent>) => void;
        /**
          * Instructbrxal text that shows before the input has a value.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * The number of visible text lines for the control.
         */
        "rows"?: number;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck"?: boolean;
        /**
          * The value of the textarea.
         */
        "value"?: string | null;
        /**
          * Indicates how the control wraps text.
         */
        "wrap"?: 'hard' | 'soft' | 'off';
    }
    interface BrxTooltip {
        "active"?: boolean;
        "color"?: string;
        "place"?: 'top' | 'bottom' | 'left' | 'right';
        "popover"?: boolean;
        "target"?: string | HTMLElement | undefined;
        "text"?: string | undefined;
        "timer"?: number | undefined;
        "type"?: string;
    }
    interface BrxTooltipAuto {
        "place"?: BrxTooltip['place'];
        "tooltipText"?: string | undefined;
    }
    interface BrxTooltipContent {
        "color"?: string;
        "place"?: string;
        "popover"?: boolean;
    }
    interface BrxUpload {
        /**
          * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
         */
        "accept"?: string;
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        "disabled"?: boolean;
        "handleUploadFiles"?: IHandleUploadFiles;
        "hiddenLabel"?: boolean;
        "inputId"?: string | undefined;
        "label"?: string | undefined;
        "labelClass"?: string;
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        "onBrxChange"?: (event: BrxUploadCustomEvent<UploadChangeEventDetail>) => void;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * The initial size of the control. This value is in pixels unless the value of the type attribute is `"text"` or `"password"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
         */
        "size"?: number;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck"?: boolean;
        "status"?: 'danger' | 'warning' | 'info' | 'success' | undefined;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
         */
        "step"?: string;
        "value"?: AttachmentAsset[] | null;
    }
    interface IntrinsicElements {
        "brx-accordion-legacy": BrxAccordionLegacy;
        "brx-accordion-legacy-entry": BrxAccordionLegacyEntry;
        "brx-accordion-legacy-entry-content": BrxAccordionLegacyEntryContent;
        "brx-accordion-legacy-entry-item": BrxAccordionLegacyEntryItem;
        "brx-accordion-trigger": BrxAccordionTrigger;
        "brx-avatar": BrxAvatar;
        "brx-breadcrumb": BrxBreadcrumb;
        "brx-breadcrumb-card": BrxBreadcrumbCard;
        "brx-breadcrumb-item": BrxBreadcrumbItem;
        "brx-breadcrumb-list": BrxBreadcrumbList;
        "brx-button": BrxButton;
        "brx-card": BrxCard;
        "brx-card-content": BrxCardContent;
        "brx-card-footer": BrxCardFooter;
        "brx-card-header": BrxCardHeader;
        "brx-checkbox": BrxCheckbox;
        "brx-checkgroup": BrxCheckgroup;
        "brx-collapse-trigger": BrxCollapseTrigger;
        "brx-divider": BrxDivider;
        "brx-dropdown": BrxDropdown;
        "brx-dropdown-trigger": BrxDropdownTrigger;
        "brx-icon": BrxIcon;
        "brx-input": BrxInput;
        "brx-item": BrxItem;
        "brx-list": BrxList;
        "brx-list-header": BrxListHeader;
        "brx-loading": BrxLoading;
        "brx-message": BrxMessage;
        "brx-modal": BrxModal;
        "brx-modal-body": BrxModalBody;
        "brx-modal-footer": BrxModalFooter;
        "brx-modal-header": BrxModalHeader;
        "brx-notification": BrxNotification;
        "brx-radio": BrxRadio;
        "brx-radio-group": BrxRadioGroup;
        "brx-scrim": BrxScrim;
        "brx-scrim-trigger": BrxScrimTrigger;
        "brx-signin": BrxSignin;
        "brx-skiplink": BrxSkiplink;
        "brx-step": BrxStep;
        "brx-step-progress": BrxStepProgress;
        "brx-step-progress-btn": BrxStepProgressBtn;
        "brx-tab": BrxTab;
        "brx-tabs": BrxTabs;
        "brx-tabs-panel": BrxTabsPanel;
        "brx-tabs-panels": BrxTabsPanels;
        "brx-tag": BrxTag;
        "brx-textarea": BrxTextarea;
        "brx-tooltip": BrxTooltip;
        "brx-tooltip-auto": BrxTooltipAuto;
        "brx-tooltip-content": BrxTooltipContent;
        "brx-upload": BrxUpload;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "brx-accordion-legacy": LocalJSX.BrxAccordionLegacy & JSXBase.HTMLAttributes<HTMLBrxAccordionLegacyElement>;
            "brx-accordion-legacy-entry": LocalJSX.BrxAccordionLegacyEntry & JSXBase.HTMLAttributes<HTMLBrxAccordionLegacyEntryElement>;
            "brx-accordion-legacy-entry-content": LocalJSX.BrxAccordionLegacyEntryContent & JSXBase.HTMLAttributes<HTMLBrxAccordionLegacyEntryContentElement>;
            "brx-accordion-legacy-entry-item": LocalJSX.BrxAccordionLegacyEntryItem & JSXBase.HTMLAttributes<HTMLBrxAccordionLegacyEntryItemElement>;
            "brx-accordion-trigger": LocalJSX.BrxAccordionTrigger & JSXBase.HTMLAttributes<HTMLBrxAccordionTriggerElement>;
            "brx-avatar": LocalJSX.BrxAvatar & JSXBase.HTMLAttributes<HTMLBrxAvatarElement>;
            "brx-breadcrumb": LocalJSX.BrxBreadcrumb & JSXBase.HTMLAttributes<HTMLBrxBreadcrumbElement>;
            "brx-breadcrumb-card": LocalJSX.BrxBreadcrumbCard & JSXBase.HTMLAttributes<HTMLBrxBreadcrumbCardElement>;
            "brx-breadcrumb-item": LocalJSX.BrxBreadcrumbItem & JSXBase.HTMLAttributes<HTMLBrxBreadcrumbItemElement>;
            "brx-breadcrumb-list": LocalJSX.BrxBreadcrumbList & JSXBase.HTMLAttributes<HTMLBrxBreadcrumbListElement>;
            "brx-button": LocalJSX.BrxButton & JSXBase.HTMLAttributes<HTMLBrxButtonElement>;
            "brx-card": LocalJSX.BrxCard & JSXBase.HTMLAttributes<HTMLBrxCardElement>;
            "brx-card-content": LocalJSX.BrxCardContent & JSXBase.HTMLAttributes<HTMLBrxCardContentElement>;
            "brx-card-footer": LocalJSX.BrxCardFooter & JSXBase.HTMLAttributes<HTMLBrxCardFooterElement>;
            "brx-card-header": LocalJSX.BrxCardHeader & JSXBase.HTMLAttributes<HTMLBrxCardHeaderElement>;
            "brx-checkbox": LocalJSX.BrxCheckbox & JSXBase.HTMLAttributes<HTMLBrxCheckboxElement>;
            "brx-checkgroup": LocalJSX.BrxCheckgroup & JSXBase.HTMLAttributes<HTMLBrxCheckgroupElement>;
            "brx-collapse-trigger": LocalJSX.BrxCollapseTrigger & JSXBase.HTMLAttributes<HTMLBrxCollapseTriggerElement>;
            "brx-divider": LocalJSX.BrxDivider & JSXBase.HTMLAttributes<HTMLBrxDividerElement>;
            "brx-dropdown": LocalJSX.BrxDropdown & JSXBase.HTMLAttributes<HTMLBrxDropdownElement>;
            "brx-dropdown-trigger": LocalJSX.BrxDropdownTrigger & JSXBase.HTMLAttributes<HTMLBrxDropdownTriggerElement>;
            "brx-icon": LocalJSX.BrxIcon & JSXBase.HTMLAttributes<HTMLBrxIconElement>;
            "brx-input": LocalJSX.BrxInput & JSXBase.HTMLAttributes<HTMLBrxInputElement>;
            "brx-item": LocalJSX.BrxItem & JSXBase.HTMLAttributes<HTMLBrxItemElement>;
            "brx-list": LocalJSX.BrxList & JSXBase.HTMLAttributes<HTMLBrxListElement>;
            "brx-list-header": LocalJSX.BrxListHeader & JSXBase.HTMLAttributes<HTMLBrxListHeaderElement>;
            "brx-loading": LocalJSX.BrxLoading & JSXBase.HTMLAttributes<HTMLBrxLoadingElement>;
            "brx-message": LocalJSX.BrxMessage & JSXBase.HTMLAttributes<HTMLBrxMessageElement>;
            "brx-modal": LocalJSX.BrxModal & JSXBase.HTMLAttributes<HTMLBrxModalElement>;
            "brx-modal-body": LocalJSX.BrxModalBody & JSXBase.HTMLAttributes<HTMLBrxModalBodyElement>;
            "brx-modal-footer": LocalJSX.BrxModalFooter & JSXBase.HTMLAttributes<HTMLBrxModalFooterElement>;
            "brx-modal-header": LocalJSX.BrxModalHeader & JSXBase.HTMLAttributes<HTMLBrxModalHeaderElement>;
            "brx-notification": LocalJSX.BrxNotification & JSXBase.HTMLAttributes<HTMLBrxNotificationElement>;
            "brx-radio": LocalJSX.BrxRadio & JSXBase.HTMLAttributes<HTMLBrxRadioElement>;
            "brx-radio-group": LocalJSX.BrxRadioGroup & JSXBase.HTMLAttributes<HTMLBrxRadioGroupElement>;
            "brx-scrim": LocalJSX.BrxScrim & JSXBase.HTMLAttributes<HTMLBrxScrimElement>;
            "brx-scrim-trigger": LocalJSX.BrxScrimTrigger & JSXBase.HTMLAttributes<HTMLBrxScrimTriggerElement>;
            "brx-signin": LocalJSX.BrxSignin & JSXBase.HTMLAttributes<HTMLBrxSigninElement>;
            "brx-skiplink": LocalJSX.BrxSkiplink & JSXBase.HTMLAttributes<HTMLBrxSkiplinkElement>;
            "brx-step": LocalJSX.BrxStep & JSXBase.HTMLAttributes<HTMLBrxStepElement>;
            "brx-step-progress": LocalJSX.BrxStepProgress & JSXBase.HTMLAttributes<HTMLBrxStepProgressElement>;
            "brx-step-progress-btn": LocalJSX.BrxStepProgressBtn & JSXBase.HTMLAttributes<HTMLBrxStepProgressBtnElement>;
            "brx-tab": LocalJSX.BrxTab & JSXBase.HTMLAttributes<HTMLBrxTabElement>;
            "brx-tabs": LocalJSX.BrxTabs & JSXBase.HTMLAttributes<HTMLBrxTabsElement>;
            "brx-tabs-panel": LocalJSX.BrxTabsPanel & JSXBase.HTMLAttributes<HTMLBrxTabsPanelElement>;
            "brx-tabs-panels": LocalJSX.BrxTabsPanels & JSXBase.HTMLAttributes<HTMLBrxTabsPanelsElement>;
            "brx-tag": LocalJSX.BrxTag & JSXBase.HTMLAttributes<HTMLBrxTagElement>;
            "brx-textarea": LocalJSX.BrxTextarea & JSXBase.HTMLAttributes<HTMLBrxTextareaElement>;
            "brx-tooltip": LocalJSX.BrxTooltip & JSXBase.HTMLAttributes<HTMLBrxTooltipElement>;
            "brx-tooltip-auto": LocalJSX.BrxTooltipAuto & JSXBase.HTMLAttributes<HTMLBrxTooltipAutoElement>;
            "brx-tooltip-content": LocalJSX.BrxTooltipContent & JSXBase.HTMLAttributes<HTMLBrxTooltipContentElement>;
            "brx-upload": LocalJSX.BrxUpload & JSXBase.HTMLAttributes<HTMLBrxUploadElement>;
        }
    }
}
